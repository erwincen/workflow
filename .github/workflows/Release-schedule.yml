name: Dev Deploy

on:
  pull_request:
    branches:
      - main
  # schedule:
  #   # https://crontab.guru/#0_13_*_*_TUE
  #   - cron: "20 23 * * *"

concurrency:
  group: deploy
  cancel-in-progress: true

jobs:
  Check-Release:
    runs-on: ubuntu-latest
    outputs:
      run_rest_jobs: ${{ steps.set_output.outputs.run_jobs }}
      notes: ${{ steps.set_output.outputs.notes }}
    environment:
      name: TEST
      
    steps:
      - uses: actions/checkout@v2
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

      - name: Generate Release Notes
        id: release-notes
        uses: actions/github-script@v6
        with: 
          debug: true
          script: |
            try {
              const result = await github.rest.repos.generateReleaseNotes({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: 'unique'
              })

              if (result.data.body.includes('fix:') || result.data.body.includes('feat:') ) {
                return true
              }
            } catch (e) {
              return false
            }
        
      - name: Create Release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            if ( ${{steps.release-notes.outputs.result}} === true ) {
              try {
                const result = await github.rest.repos.createRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag_name: 'unique12',
                  generate_release_notes: true,
                  draft: true,
                })

                const note = result.data.body
                console.log('note', note)
                return {result: true, note: note}
              } catch (e) {
                console.log('error',e)
                return {result: false}
              }
            } else {
              console.log('else***')
              return {result: false}
            }
          
      - name: Return true or false
        id: set_output
        run: |
          if (${{ fromJson(steps.create-release.outputs.result).result }} == true ); then
            echo "::set-output name=run_jobs::true"
            echo "::set-output name=notes=${{ fromJson(steps.create-release.outputs.result).note}}"
          else
            echo "::set-output name=run_jobs::false"
          fi

  # No-Release:
  #   needs: Check-Release
  #   if: needs.Check-Release.outputs.run_rest_jobs == 'true'
  #   runs-on: ubuntu-latest
  #   environment:
  #     name: TEST
  #   steps:
  #     - name: notify CS
  #       uses: slackapi/slack-github-action@v1.21.0
  #       env:
  #         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  #         SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
  #       with:
  #         payload: '{ "text": "No release" }'

  # Deploy-Stage:
  #   needs: Check-Release
  #   if: needs.Check-Release.outputs.run_rest_jobs == 'true'
  #   runs-on: ubuntu-latest
  #   environment:
  #     name: TEST
  #   steps:
  #     - run: echo ${{ toJson(needs.Check-Release.outputs)}}
  #     - name: deploy_stage
  #       run: echo deploy to stage
  
  # Notify-Stage:
  #   needs: Deploy-Stage
  #   environment:
  #     name: TEST
  #   runs-on: ubuntu-latest
    # steps:
    #   - name: notify CS
    #     uses: slackapi/slack-github-action@v1.21.0
    #     env:
    #       SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
    #     with:
    #       channel-id: 'CPH9L6QF6'
    #       slack-message: "Deployed to stage"

  # Deploy-Prod:
  #   needs: Deploy-Stage
  #   runs-on: ubuntu-latest
  #   environment:
  #     name: Prod
  #   steps:
  #     - name: notify CS
  #       run: echo maintenance started
  #     - name: deploy_Prod
  #       run: echo deploy to Prod
  
  Notify-Prod:
    needs: [Check-Release]
    runs-on: ubuntu-latest

    steps:
      - run: echo ${{ needs.Check-Release.outputs.notes }}
      - run: echo ${{ toJson(needs.Check-Release.outputs.notes)}}
      - run: echo ${{ fromJson(needs.Check-Release.outputs.notes)}}
      - name: deploy_stage
        run: echo deploy to stage
  
      # - name: notify_Prod
      #   run: echo notify to Prod
      # - name: notify CS
      #   run: echo maintenance completed
      # - name: notify CS
      #   uses: slackapi/slack-github-action@v1.21.0
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      #   with:
      #     payload: '{ "text": ":tada: Deployed to Prod :tada:" }'


# name: Cron

# on:
#   schedule:
# https://crontab.guru/#0_13_*_*_TUE
#     - cron: "0 13 * * TUE"

# jobs:
#   cron:
#     runs-on: ubuntu-latest
    
#     steps:
#       # Runs a single command using the runners shell
#       - name: condition 1
#         if: contains(github.event.head_commit.message, 'fix')
#         run: echo Hello, world!
#       - name: condition 2
#         run: echo github.event.head_commit.message

# jobs:
#   release-please:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: google-github-actions/release-please-action@v3
#         with:
#           release-type: node
#           package-name: release-please-action




      # - name: Show Response
      #   run: echo ${{ steps.create-release-notes }}

      # - name: Show Response 2
      #   run: echo ${{ toJSON(steps.create-release-notes)}}

      # - name: print workspace id
      #   run: echo ${{ toJSON(steps.release_notes) }}
      # - name: parse-release-notes
      #   run: echo ${{ toJson(steps.release_notes.outputs) }}

      # - name: Create Release
      #   # if: contains(steps.release_notes.outputs.body, 'fix:')
      #   # https://github.com/softprops/action-gh-release dd
      #   uses: softprops/action-gh-release@v1
      #   with: 
      #     generate_release_notes: true
      #     tag_name: "releases/${{ steps.date.outputs.date }}"
      #     token: "${{ secrets.TOKEN }}"
      #     draft: true