name: Dev Deploy

on:
  pull_request:
    branches:
      - main
  # schedule:
  #   # https://crontab.guru/#0_13_*_*_TUE
  #   - cron: "20 23 * * *"

concurrency:
  group: deploy
  cancel-in-progress: true

jobs:
  Check-Release:
    runs-on: ubuntu-latest
    outputs:
      run_rest_jobs: ${{ steps.set_output.outputs.run_jobs }}
    environment:
      name: TEST
      
    steps:
      - uses: actions/checkout@v2

      - name: Generate Release Notes
        id: release-notes
        uses: actions/github-script@v6
        with: 
          debug: true
          script: |
            try {
              const result = await github.rest.repos.generateReleaseNotes({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: 'this-will-be-auto',
              })
              if (result.data.body.includes('fix:') || result.data.body.includes('feat:') ) {
                return true
              } else {
                return false
              }
            } catch (e) {
              return false
            }

      - name: Return check release
        id: set_output
        run: |
          if [[ ${{ steps.release-notes.outputs.result }} == true ]]; then
            echo "::set-output name=run_jobs::true"
          else
            echo "::set-output name=run_jobs::false"
          fi
    
  Create-Release:
    needs: Check-Release
    if: needs.Check-Release.outputs.run_rest_jobs == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

      - name: Create Release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            try {
              const result = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: 'releases/2022-08-17.3',
                generate_release_notes: true,
                draft: true
              })

              return {result: true, notes: result.data.body}
            } catch (e) {
              return {result: false}
            }
      

      - name: Write to file
        if: ${{ fromJson(steps.create-release.outputs.result).result }} == 'true'
        # env: 
        #   JSON: ${{ toJson(steps.create-release.outputs.result)}}
        run: echo ${{ toJson(steps.create-release.outputs.result) }} >> releaseNote.txt

      - name: Upload file
        if: ${{ fromJson(steps.create-release.outputs.result).result }} == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: releaseNote
          path: releaseNote.txt
          retention-days: 5
        
  No-Release:
    needs: Check-Release
    if: needs.Check-Release.outputs.run_rest_jobs == 'false'
    runs-on: ubuntu-latest
    environment:
      name: TEST
    steps:
      - name: notify CS
        uses: slackapi/slack-github-action@v1.21.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          channel-id: 'C03TVBRBHU5'
          slack-message: "No Deployment"

  Deploy-Stage:
    needs: Create-Release
    runs-on: ubuntu-latest
    environment:
      name: TEST
    steps:
      - name: deploy_stage
        run: echo deploy to stage
  
  Notify-Stage:
    needs: Deploy-Stage
    environment:
      name: TEST
    runs-on: ubuntu-latest
    steps:
      - name: notify CS
        uses: slackapi/slack-github-action@v1.21.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          channel-id: 'C03TVBRBHU5'
          slack-message: "Deployed to stage"

  Deploy-Prod:
    needs: Deploy-Stage
    runs-on: ubuntu-latest
    environment:
      name: Prod
    steps:
      - name: notify CS
        id: slack-cs
        uses: slackapi/slack-github-action@v1.21.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          channel-id: 'C03TVBRBHU5'
          slack-message: "Maintenance is started"
          
      - name: deploy_Prod
        run: echo deploy to Prod
  
  Notify-Prod:
    needs: [Deploy-Prod]
    runs-on: ubuntu-latest
    environment:
      name: TEST
    steps:
      - name: deploy_prod
        run: echo deploy to prod

      - name: Download release notes
        uses: actions/download-artifact@v3
        with:
          name: releaseNote

      - name: Print the release notes
        id: result
        shell: bash
        run: echo ::set-output name=release::$(cat releaseNote.txt)

      - name: slack deployment channel
        uses: slackapi/slack-github-action@v1.21.0
        env:
          JSON: ${{ fromJson(steps.result.outputs.release).notes}}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          channel-id: 'C03TVBRBHU5'
          slack-message: "${{ fromJson(steps.result.outputs.release).notes }}"
      
      - name: notify CS
        id: slack-cs

        uses: slackapi/slack-github-action@v1.21.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          channel-id: 'C03TVBRBHU5'
          slack-message: "Maintenance is finished"

  
      # - name: notify_Prod
      #   run: echo notify to Prod
      # - name: notify CS
      #   run: echo maintenance completed
      # - name: notify CS
      #   uses: slackapi/slack-github-action@v1.21.0
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      #   with:
      #     payload: '{ "text": ":tada: Deployed to Prod :tada:" }'


# name: Cron

# on:
#   schedule:
# https://crontab.guru/#0_13_*_*_TUE
#     - cron: "0 13 * * TUE"

# jobs:
#   cron:
#     runs-on: ubuntu-latest
    
#     steps:
#       # Runs a single command using the runners shell
#       - name: condition 1
#         if: contains(github.event.head_commit.message, 'fix')
#         run: echo Hello, world!
#       - name: condition 2
#         run: echo github.event.head_commit.message

# jobs:
#   release-please:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: google-github-actions/release-please-action@v3
#         with:
#           release-type: node
#           package-name: release-please-action




      # - name: Show Response
      #   run: echo ${{ steps.create-release-notes }}

      # - name: Show Response 2
      #   run: echo ${{ toJSON(steps.create-release-notes)}}

      # - name: print workspace id
      #   run: echo ${{ toJSON(steps.release_notes) }}
      # - name: parse-release-notes
      #   run: echo ${{ toJson(steps.release_notes.outputs) }}

      # - name: Create Release
      #   # if: contains(steps.release_notes.outputs.body, 'fix:')
      #   # https://github.com/softprops/action-gh-release dd
      #   uses: softprops/action-gh-release@v1
      #   with: 
      #     generate_release_notes: true
      #     tag_name: "releases/${{ steps.date.outputs.date }}"
      #     token: "${{ secrets.TOKEN }}"
      #     draft: true